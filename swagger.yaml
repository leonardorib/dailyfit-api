openapi: 3.0.0
info:
  title: Dailyfit API
  description: Node.js API serving the [Dailyfit App](https://github.com/leonardorib/dailyfit-mobile).
  version: 1.0.0
servers:
  - url: https://api.dailyfit.leonardoribeiro.com
    description: Main production server
  - url: http://localhost:3334
    description: Local development server
paths:

  ### Auth
  /auth:
    post:
      summary: Authenticates with an user account.
      tags: ["Auth"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: johndoe@gmail.com
              password: some-secure-password-123
      responses:
        '200':
          description: Success. Returns user information and JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNzIyZGY0MWUtMzA3NS00NjIwLWE4ZGItMDYxYWI0ZDcxNTBhIiwiZmlyc3RfbmFtZSI6IkpvaG4iLCJsYXN0X25hbWUiOiJEb2UiLCJlbWFpbCI6ImpvaG5kb2VAZ21haWwuY29tIiwiY3JlYXRlZF9hdCI6IjIwMjEtMTAtMjlUMDU6MDM6NDIuNzMxWiIsInVwZGF0ZWRfYXQiOiIyMDIxLTEwLTI5VDA1OjQ5OjUxLjE4N1oifSwiaWF0IjoxNjM1NTU5MTkxLCJleHAiOjE2MzYxNjM5OTF9.ZlKMaj2UGvdgntim6yMdzoF8cvdtYwCHAyg17a7DSvk
        '400':
          description: User does not exist, credentials are wrong or validation error.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User does not exist or credentials are wrong.
                  - $ref: '#/components/responses/400-Validation'

  ### Users
  /users:
    post:
      summary: Creates a new user.
      tags: ["Users"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                passwordConfirmation:
                  type: string
            example:
              firstName: John
              lastName: Doe
              email: johndoe@gmail.com
              password: some-secure-password-123
              passwordConfirmation: some-secure-password-123
      responses:
        '200':
          description: Success. Returns the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already in use or validation error.
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/ValidationResponseData'
                - type: object
                  properties:
                    message:
                      type: string
                      example: test
              examples:
                Validation:
                  $ref: '#/components/examples/ValidationResponseExample'
                "Email in use":
                  $ref: '#/components/examples/EmailAlreadyInUseExample'

    put:
      summary: Updates user profile data.
      description: The user is identified through the  JWT token payload.
      tags: ["Users"]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: johndoe@gmail.com
                password:
                  type: string
                  example: some-secure-password-123
      responses:
        '200':
          description: Updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already in use or validation error.
          content:
            application/json:
              examples:
                Validation:
                  $ref: '#/components/examples/ValidationResponseExample'
                "Email in use":
                  $ref: '#/components/examples/EmailAlreadyInUseExample'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /users/{userId}:
     delete:
      summary: Deletes an user by id.
      tags:
        - "Users"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: some-secure-password-123
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            example: a20f9419-4e6e-4e42-90d4-737f889a43a1
          required: true
          description: ID (uuid) of the user to delete
      responses:
        '200':
          description: Deleted sucessfully. Returns the deleted user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /users/forgotpassword:
    post:
      summary: Creates and sends a password reset token to a specified user email.
      description: On production, check the email. On development mode, check the application logs.
      tags: ["Users"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@gmail.com
      responses:
        '200':
          description: Reset password token created and sent sucessfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password recovery email has been sent successfully"
        '400':
          $ref: '#/components/responses/400-Validation'
        '404':
          $ref: '#/components/responses/404'
  /users/resetpassword:
    post:
      summary: Resets an user password if a reset password token is provided.
      tags: ["Users"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@gmail.com
                token:
                  type: string
                  example: e173013b01418260c75dceab78b8b0a80120c895
                newPassword:
                  type: string
                  example: "10203040"
                newPasswordConfirmation:
                  type: string
                  example: "10203040"
      responses:
        '200':
          description: Password updated sucessfully. Returns the user that had password updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /users/password:
    put:
      summary: Updates user password.
      description: The user is identified through the  JWT token payload.
      tags: ["Users"]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                newPassword:
                  type: string
                newPasswordConfirmation:
                  type: string
            example:
              password: some-secure-password-123
              newPassword: some-secure-password-123
              newPasswordConfirmation: some-secure-password-123
      responses:
        '200':
          description: User that had password updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'


  ### Foods
  /foods:
   get:
      summary: Gets a list of foods filtered by name.
      tags:
        - "Foods"
      parameters:
        - in: query
          name: foodName
          schema:
            type: string
            example: arroz
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Search was sucessfull. Returns an array with the foods found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFoods'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'


  ### Meals
  /meals:
    post:
      summary: Creates a meal.
      tags:
        - "Meals"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Breakfast"
                date:
                  type: string
                  example: "2021-10-30T20:54:51.313Z"
                  description: ISO8601 Date string
      responses:
        '200':
          description: Meal created successfully. Returns the Meal.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
    get:
      summary: List meals between two dates.
      tags:
        - "Meals"
      parameters:
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            example: "2021-02-27T02:14:07.968Z"
            description: ISO8601 Date string
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            example: "2021-03-01T23:14:07.968Z"
            description: ISO8601 Date string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success. Returns an array of meals and total nutrients quantity.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Nutrients'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
  /meals/{mealId}:
    get:
      summary: Gets a meal by ID.
      tags:
        - "Meals"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/mealId'
      responses:
        '200':
          description: Meal found successfully. Returns the Meal data, list of meal food items on it, and the total nutrients quantity.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Meal'
                - type: object
                  properties:
                    mealFoods:
                      $ref: '#/components/schemas/ArrayOfMealFoodsWithFoodData'
                - $ref: '#/components/schemas/Nutrients'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Updates meal name.
      tags:
        - "Meals"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/mealId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Breakfast"
      responses:
        '200':
          description: Meal updated successfully. Returns the meal.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Meal'
                - type: object
                  properties:
                    mealFoods:
                      $ref: '#/components/schemas/ArrayOfMealFoodsWithFoodData'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Deletes meal.
      tags:
        - "Meals"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/mealId'
      responses:
        '200':
          description: Meal deleted successfully. Returns the deleted Meal data, list of meal food items on it, and the total nutrients quantity.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Meal'
                - type: object
                  properties:
                    mealFoods:
                      $ref: '#/components/schemas/ArrayOfMealFoodsWithFoodData'
                - $ref: '#/components/schemas/Nutrients'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'


  ### Meal Foods
  /mealfoods/{mealFoodId}:
    get:
      summary: Gets a meal food by ID.
      tags:
        - "Meal Foods"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/mealFoodId'
      responses:
        '200':
          description: Meal food found successfully. Returns the Meal Food.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/MealFood'
                - type: object
                  properties:
                    food:
                      $ref: '#/components/schemas/Food'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Deletes a meal food by ID.
      tags:
        - "Meal Foods"
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/mealFoodId'
      responses:
        '200':
          description: Meal food deleted successfully. Returns the Meal Food.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/MealFood'
                - type: object
                  properties:
                    food:
                      $ref: '#/components/schemas/Food'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      summary: Updated a meal food item with new quantity or food type.
      tags:
        - "Meal Foods"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                foodId:
                  type: string
                  example: 4644d4ae-20f9-4e12-aaff-105dfa49ab2e
                quantity:
                  type: number
                  example: 100
      parameters:
        - $ref: '#/components/parameters/mealFoodId'
      responses:
        '200':
          description: Meal food updated successfully. Returns the Meal Food.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/MealFood'
                - type: object
                  properties:
                    food:
                      $ref: '#/components/schemas/Food'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /mealfoods:
    post:
      summary: Adds food item (meal food) to a meal.
      tags:
        - "Meal Foods"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mealId:
                  type: string
                  example: 47826e94-b64a-4931-b280-0dd73a92ec0a
                foodId:
                  type: string
                  example: 4644d4ae-20f9-4e12-aaff-105dfa49ab2e
                quantity:
                  type: number
                  example: 350
                quantity_unit:
                  type: string
                  example: g
                  default: g
                  description: For now, does not make a difference. In future releases it will be compatible with other units.
      responses:
        '200':
          description: Meal food added successfully. Returns the Meal Food.
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/MealFood'
                - type: object
                  properties:
                    food:
                      $ref: '#/components/schemas/Food'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

components:
  parameters:
    mealId:
      in: path
      name: mealId
      schema:
        type: string
        example: c20f9417-1e6g-2e45-70d2-337f889a43a2
      required: true
      description: ID (uuid) of the meal.
    mealFoodId:
      in: path
      name: mealFoodId
      schema:
        type: string
        example: a20f9419-4e6e-4e42-90d4-737f889a43a1
      required: true
      description: ID (uuid) of the meal food.
  schemas:
    CreatedAtAndUpdatedAt:
      allOf:
      - type: object
        properties:
          created_at:
            type: string
            example: "2021-10-29T04:44:44.857Z"
          updated_at:
            type: string
            example: "2021-10-29T04:44:44.857Z"
    Nutrients:
      allOf:
      - type: object
        properties:
          energy_kcal:
            type: number
            example: 124
          energy_kj:
            type: number
            example: 517
          carbs:
            type: number
            example: 25.8
          proteins:
            type: number
            example: 2.6
          fats:
            type: number
            example: 1
    User:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: "a20g9419-4e7e-4h42-91d4-737f899a42a1"
            first_name:
              type: string
              example: Leonardo
            last_name:
              type: string
              example: Ribeiro
            email:
              type: string
              example: leonardo.rib@hotmail.com
        - $ref: '#/components/schemas/CreatedAtAndUpdatedAt'
    Food:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: bf025758-6074-4986-b350-464866d5e3da
            name:
              type: string
              example: "Arroz, integral, cozido"
            standard_quantity:
              type: integer
              example: 100
            standard_quantity_unit:
              type: string
              example: g
        - $ref: '#/components/schemas/Nutrients'
        - $ref: '#/components/schemas/CreatedAtAndUpdatedAt'
    ArrayOfFoods:
      allOf:
        - type: array
          items:
            $ref: '#/components/schemas/Food'
    Meal:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: faeff764-9c02-4f0a-9b11-881976a130e3
            user_id:
              type: string
              example: 40aa3be3-30a4-43c3-afe8-c71edf967107
            name:
              type: string
              example: "Breakfast"
            date:
              type: string
              example: "2021-10-30T20:54:51.313Z"
              description: ISO8601 Date string
        - $ref: '#/components/schemas/CreatedAtAndUpdatedAt'
    MealFood:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: bf025758-6074-4986-b350-464866d5e3da
            name:
              type: string
              example: "Arroz, integral, cozido"
            food_id:
              type: string
              example: kf025750-5073-3985-e351-364866d5e3dc
            meal_id:
              type: string
              example: af225659-6084-4886-c351-364866d5e3db
            quantity:
              type: number
              example: 100
            quantity_unit:
              type: string
              example: g
        - $ref: '#/components/schemas/Nutrients'
        - $ref: '#/components/schemas/CreatedAtAndUpdatedAt'
    MealFoodWithFoodData:
      allOf:
        - $ref: '#/components/schemas/MealFood'
        - type: object
          properties:
            food:
              $ref: '#/components/schemas/Food'
    ArrayOfMealFoodsWithFoodData:
      allOf:
        - type: array
          items:
            $ref: '#/components/schemas/MealFoodWithFoodData'
    ValidationResponseData:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Request validation failed.
        validation:
          type: object
          example:
            body:
              source: body
              keys:
                - quantity
              message: quantity must be a number
  responses:
    '404':
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                message:
                  type: string
                  example: The specified resource was not found.
    '401':
      description: You didn't provided a token or are not allowed to see this resource or perform this action.
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                message:
                  type: string
                  example: You are not allowed to see this resource or perform this action.
    '401-WrongPassword':
      description: Password is wrong.
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                message:
                  type: string
                  example: Password does not match.
    '401-NoTokenOrWrongPassword':
      description: Password is wrong or bearer token was not provided.
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                message:
                  type: string
                  example: Password does not match.
    '400-Validation':
      description: Request validation failed. One or more parameters are invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationResponseData'
  examples:
    ValidationResponseExample:
      value:
        statusCode: 400
        error: Bad Request
        message: You are not allowed to see this resource or perform this action
        validation:
          body:
            source: body
            keys:
              - quantity
            message: quantity must be a number
    EmailAlreadyInUseExample:
      value:
        message: Email already in use
    401PasswordExample:
      value:
        message: Password does not match
    404Example:
      value:
        message: The specified resource was not found
    401Example:
      value:
        message: You are not allowed to see this resource or perform this action.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT